% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/hs_RF.R
\name{hs_RF}
\alias{hs_RF}
\title{Train random forest model on hyperspec object}
\usage{
hs_RF(
  hs.x,
  metadata,
  target_var,
  spectrumID_col,
  ntree = 500,
  p_train = 0.75,
  metric = "Accuracy",
  ...
)
}
\arguments{
\item{hs.x}{Hyperspec object}

\item{metadata}{Dataframe containing the categorical variable/group to predict (target_var)
and also a column with the matching spectrum identifiers (spectrumID_col).}

\item{target_var}{Categorical variable/group to predict in metadata}

\item{spectrumID_col}{Column with the matching spectrum identifiers (spectrumID_col)
in metadata}

\item{ntree}{Number of trees to build. Defaults to 500.}

\item{p_train}{Percentage of data to use in training model. Defaults to 0.75.}

\item{metric}{Metric to use to report/maximize performance of model (only for method_ML = "rf")}
}
\description{
Train random forest model on hyperspec object
}
\examples{
# Short example
data("hs_example")

# Preprocess
hs_example <- hs_preprocess(hs_example)

# Mock-up metadata
mock_meta <- data.frame(Spectrum_ID = rownames(hs_example@data$spc),
group = factor(c(rep(1,30),rep(2,34))))

# Calculate metrics
hs.RF <- hs_RF(hs.x = hs_example, metadata = mock_meta, spectrumID_col= "Spectrum_ID",
 target_var = "group")

 # Trained model
 print(hs.RF[[1]])

 # Confusion matrix
 print(hs.RF[[2]])

 # Variable importance metric
 caret::varImp(hs.RF[[1]])

 # Perform predictions
 hs_RF_pred(hs.x = hs_example, model = hs.RF[[1]])
}
